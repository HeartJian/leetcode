Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：

初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；
开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；
确定入口：根据配置中的 entry 找出所有的入口文件；
编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；
完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；
输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；
输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。

在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果


1.读取启动项跟配置项里的参数
2.createcomplier(option) 
3.在Compiler的构造函数中主要对编译周期的钩子hook进行了初始化和参数的初始化.
4.组装config创建complier对象 ，订阅配置文件里的plugin，根据配置订阅一些基本的loader(resolve)，devserver等能力，订阅默认的plugin
5.执行this.compile 定义了三个阶段的函数 run(开始打包) onCompiled(文件输出) finalCallback(编译后处理) 串联起调用逻辑 run => onCompiled => finalCallback
6.执行run方法 触发make钩子调起之前注册的EntryPlugin的打包逻辑,处理入口文件，调用factorizeModule的时候通过SyncQueue发起创建module类 放入moduleGraph 
7.调用buildmodule => dobuild(继承于modulenormal类),runloader 方法 执行loader
8.通过parse方法解析生成的ast 生成依赖模块的信息
9.在当前Entry模块解析完毕后触发回调回到上次发起processModuleDependencies的调用开启依赖模块的打包.
10.执行compiler seal
11.根据入口创建EntryPoint 他是一个chunk group.负责维护与入口相关的依赖.
12.buildChunkGraph 生成模块的依赖依赖结构 相关的模块会保存到一个chunk group里面
13._runCodeGenerationJobs调用module的生成代码逻辑,生成代码
14.最后通过getRenderManifest fileManifest.render进行最后输出文件的拼接


raw-loader：加载文件原始内容（utf-8）
file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)
url-loader：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)
babel-loader：把 ES6 转换成 ES5
sass-loader：将SCSS/SASS代码转换成CSS
css-loader：加载 CSS，支持模块化、压缩、文件导入等特性
style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS
eslint-loader：通过 ESLint 检查 JavaScript 代码
postcss-loader
链接：https://juejin.cn/post/6844904094281236487

你用过哪些webpack plugin
MiniCssExtractPlugin 分离样式文件，CSS 提取为独立文件，支持按需加载 
HtmlWebpackPlugin 
ignore-plugin：忽略部分文件
uglifyjs-webpack-plugin：不支持 ES6 压缩 (Webpack4 以前)
clean-webpack-plugin: 目录清理
DefinePlugin：获取常量

4.使用webpack开发时，你用过哪些可以提高效率的插件？
size-plugin：监控资源体积变化，尽早发现问题

HotModuleReplacementPlugin：模块热替换


10.文件指纹是什么？怎么用？
文件指纹是打包后输出的文件名的后缀。

Hash：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改
Chunkhash：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chunkhash
Contenthash：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变

purgecss-webpack-plugin
去除不用的css
html-webpack-externals-plugin
引入需要的cdn文件
Tree-shaking：webpack内置的去除未引用代码，但是会有只是import的代码，以下可以保留css的同时去除引入
// package.json文件
{
    ...省略
    "sideEffects": ["./src/**/*.css"]
}

